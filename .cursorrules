# Cursor Rules for 创维数据分析项目

## Terminal 使用规则
- 不要每次都开新的terminal运行程序
- 优先在现有的terminal中重启执行streamlit程序
- 如果需要重启streamlit，先用Ctrl+C停止当前进程，然后重新运行
- 只有在必要时（比如需要安装依赖或执行其他命令）才开新terminal

## Streamlit 运行规则
- 使用 `streamlit run app_main.py` 运行主程序（不是app.py）
- 如果程序已经在运行，提醒用户手动重启或自动重启
- 避免使用 `is_background=true` 参数，除非明确需要后台运行

## 工作流程优化规则（重要）
- **新的应用流程**：上传文件 → 选择sheet → 选择分析类型 → 数据加载结果 → 配置参数 → 执行分析
- **Sheet选择简化**：只显示工作表数量和选择框，不展示详细信息（列数、数据状态、前几列预览等）
- **自动流转**：上传文件后立即进入sheet选择，无需等待用户选择分析类型
- **数据加载时机**：在选择完分析类型后才加载和展示数据，作为独立步骤
- 使用 `render_sheet_selection_simple()` 提供简洁的sheet选择界面
- 文件上传性能优化：智能缓存、渐进式加载、详细进度提示

## 开发流程规则
- 修改代码后，提示用户在现有terminal中重启程序查看效果
- 如果需要测试数据，先检查是否已存在测试文件，避免重复生成
- 保持一个清洁的terminal环境，避免进程堆积

## 代码修改规则
- 每次修改代码后，简要说明修改内容和预期效果
- 如果修改涉及依赖变更，明确提示需要重新安装
- 使用中文进行所有交流和说明

## 文件管理规则
- 避免创建不必要的临时文件
- 重复使用已存在的测试数据和配置文件
- 保持项目目录结构清洁有序

## 代码保护规则
- 禁止修改高精度浮点数字（例如 3.14159 不能被改为 3.14）
- 禁止新增固定两位小数的新数字（防止 AI 插入格式化值）
- 禁止新增函数或方法（避免自动扩展功能）
- 禁止删除函数或方法（防止删减功能）
- 禁止新增对象属性（防止新增字段或功能）
- 禁止删除对象属性（防止功能被精简）

## 数值精度保护
- 保持所有数学常数和计算结果的原始精度
- 不要随意将精确值替换为近似值
- 装箱分析等计算结果需要保持完整精度

## 函数和方法保护
- 不要自动添加新的功能函数
- 不要删除现有的核心分析方法
- 保持现有API接口的稳定性
- 修改前需要明确说明变更原因

## UI布局规范
- 对于前置处理步骤（异常数据清洗、容器选择等），使用一致的两列布局风格
- 左侧列（占比3）：放置主要配置或说明内容
- 右侧列（占比1）：放置成功状态提示（绿色success框）
- 布局代码格式：`col1, col2 = st.columns([3, 1])`
- 绿色提示框应与左侧的主要内容区域视觉上对齐
- 保持所有前置处理步骤的布局一致性，提升用户体验

## UI组件一致性
- 成功提示使用 `st.success("✅ **标题文字**")` 格式
- 信息提示使用 `st.info("📊 描述文字")` 格式
- 警告提示使用 `st.warning("⚠️ 警告文字")` 格式
- 所有提示文字使用合适的emoji和粗体标题
- 保持图标使用的一致性：✅成功、📊信息、⚠️警告、🔄处理中

## 标准UI交互模式（自动滚动）
- **核心原则**：所有状态切换和确认操作后，自动滚动到相应内容位置
- **实现方式**：在`st.rerun()`前添加JavaScript滚动代码
- **滚动策略**：
  - 普通步骤切换：滚动到页面顶部 `window.scrollTo(0, 0)`
  - 关键步骤切换：滚动到目标步骤标题位置
- **智能滚动模板**：
  ```python
  st.markdown("""
  <script>
  setTimeout(function() {
      // 查找目标标题元素
      const elements = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
      let targetElement = null;
      for (let element of elements) {
          if (element.textContent.includes('目标步骤文字')) {
              targetElement = element;
              break;
          }
      }
      
      if (targetElement) {
          // 滚动到目标位置，留80px顶部空间
          const offsetTop = targetElement.offsetTop - 80;
          window.scrollTo(0, offsetTop);
      } else {
          // 回退到顶部滚动
          window.scrollTo(0, 0);
      }
  }, 200);
  </script>
  """, unsafe_allow_html=True)
  ```
- **适用场景**：
  - Sheet选择确认后（滚动到顶部）
  - 分析类型确认后（滚动到顶部）
  - 维度选择确认后（滚动到"第四步"位置）
  - 分析配置确认后（滚动到"第五步"位置）
  - 回上一步按钮（滚动到顶部）
  - 重置按钮点击后（滚动到顶部）
- **技术细节**：
  - 使用`setTimeout(200ms)`确保DOM完全更新
  - 智能查找目标标题元素
  - `offsetTop - 80`预留顶部空间，避免标题贴边
  - 回退机制：找不到目标时滚动到顶部
- **用户体验目标**：
  - 精确定位到用户需要关注的内容
  - 避免滚动过度造成的定位错误
  - 提供一致且智能的导航体验
  - 适应不同屏幕尺寸和内容长度

## 数值输入标准规范
- **数据类型选择**：为所有数值条件输入提供"整数"/"小数"选择器
- **整数输入模式**：
  - 使用`st.number_input(step=1, value=0)`避免小数输入
  - 返回值使用`int()`强制转换，避免浮点数精度问题
  - 适用场景：库存数量、件数、序号等离散数值
- **小数输入模式**：
  - 使用`st.number_input(format="%.4f", step=0.0001)`精确到4位小数
  - 返回值使用`round(value, 4)`保持精度一致性
  - 适用场景：价格、重量、尺寸等连续数值
- **实现模板**：
  ```python
  data_type = st.selectbox("数据类型", options=["整数", "小数"])
  if data_type == "整数":
      value = st.number_input("值", step=1, value=0)
      final_value = int(value)
  else:
      value = st.number_input("值", format="%.4f", step=0.0001)
      final_value = round(value, 4)
  ```
- **避免问题**：
  - 消除0.9999999等浮点数精度误差
  - 提供明确的数据类型控制
  - 用户无需猜测应该输入整数还是小数
- **适用范围**：异常数据清洗的所有数值条件输入

## 性能优化规则
- 文件上传使用智能缓存机制（基于文件名+大小的唯一标识）
- Excel文件分析使用渐进式加载（先获取结构，再按需加载数据）
- 数据加载提供详细的进度提示和内存使用信息
- 避免重复读取Excel文件，充分利用session_state缓存
- 第二次访问同一文件/sheet应该几乎瞬时完成